package com.erajiezhang.db.dbhelp;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.erajiezhang.db.UserDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_DB".
*/
public class UserDBDao extends AbstractDao<UserDB, Long> {

    public static final String TABLENAME = "USER_DB";

    /**
     * Properties of entity UserDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Username = new Property(1, String.class, "username", false, "USERNAME");
        public final static Property Passworld = new Property(2, String.class, "passworld", false, "PASSWORLD");
        public final static Property Phong = new Property(3, String.class, "phong", false, "PHONG");
        public final static Property Enable = new Property(4, String.class, "enable", false, "ENABLE");
        public final static Property Lastlgointime = new Property(5, String.class, "lastlgointime", false, "LASTLGOINTIME");
        public final static Property DeviceId = new Property(6, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property PermissionID = new Property(7, int.class, "permissionID", false, "PERMISSION_ID");
        public final static Property MailAddress = new Property(8, String.class, "mailAddress", false, "MAIL_ADDRESS");
    }


    public UserDBDao(DaoConfig config) {
        super(config);
    }
    
    public UserDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USERNAME\" TEXT," + // 1: username
                "\"PASSWORLD\" TEXT," + // 2: passworld
                "\"PHONG\" TEXT," + // 3: phong
                "\"ENABLE\" TEXT," + // 4: enable
                "\"LASTLGOINTIME\" TEXT," + // 5: lastlgointime
                "\"DEVICE_ID\" TEXT," + // 6: deviceId
                "\"PERMISSION_ID\" INTEGER NOT NULL ," + // 7: permissionID
                "\"MAIL_ADDRESS\" TEXT);"); // 8: mailAddress
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String passworld = entity.getPassworld();
        if (passworld != null) {
            stmt.bindString(3, passworld);
        }
 
        String phong = entity.getPhong();
        if (phong != null) {
            stmt.bindString(4, phong);
        }
 
        String enable = entity.getEnable();
        if (enable != null) {
            stmt.bindString(5, enable);
        }
 
        String lastlgointime = entity.getLastlgointime();
        if (lastlgointime != null) {
            stmt.bindString(6, lastlgointime);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(7, deviceId);
        }
        stmt.bindLong(8, entity.getPermissionID());
 
        String mailAddress = entity.getMailAddress();
        if (mailAddress != null) {
            stmt.bindString(9, mailAddress);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String passworld = entity.getPassworld();
        if (passworld != null) {
            stmt.bindString(3, passworld);
        }
 
        String phong = entity.getPhong();
        if (phong != null) {
            stmt.bindString(4, phong);
        }
 
        String enable = entity.getEnable();
        if (enable != null) {
            stmt.bindString(5, enable);
        }
 
        String lastlgointime = entity.getLastlgointime();
        if (lastlgointime != null) {
            stmt.bindString(6, lastlgointime);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(7, deviceId);
        }
        stmt.bindLong(8, entity.getPermissionID());
 
        String mailAddress = entity.getMailAddress();
        if (mailAddress != null) {
            stmt.bindString(9, mailAddress);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserDB readEntity(Cursor cursor, int offset) {
        UserDB entity = new UserDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // username
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // passworld
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // phong
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // enable
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // lastlgointime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // deviceId
            cursor.getInt(offset + 7), // permissionID
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // mailAddress
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUsername(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPassworld(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPhong(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEnable(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLastlgointime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDeviceId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPermissionID(cursor.getInt(offset + 7));
        entity.setMailAddress(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserDB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserDB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserDB entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
